spring.application.name=finances
server.port=9872
server.servlet.context-path=/finances

# eureka
eureka.client.service-url.defaultZone=${EUREKA_URI:http://${eureka.username}:${eureka.password}@localhost:8761/eureka}
eureka.client.instance.preferIpAddress=true

# config server
spring.config.import=optional:configserver:http://localhost:8888
spring.cloud.config.username=configuser
spring.cloud.config.password=configsecretpsw
spring.profiles.active=dev
spring.cloud.config.fail-fast=true
spring.cloud.config.retry.initial-interval=1000
spring.cloud.config.retry.multiplier=1.1
spring.cloud.config.retry.max-interval=6000
spring.cloud.config.retry.max-attempts=6

# dataSource
spring.datasource.url=${datasource.url}
spring.datasource.username=${jdbc.username}
spring.datasource.password=${datasource.password}


# keycloak auth server
# to validate the issuer of the tokens but the Auth Server should be running before Resource Server starts
spring.security.oauth2.resourceserver.jwt.issuer-uri=${realms.auth.addr}/${realm.auth.name}
# URI containing the public key so that Resource Server can verify the tokens' integrity
spring.security.oauth2.resourceserver.jwt.jwk-set-uri=${realms.auth.addr}/${realm.auth.name}/protocol/openid-connect/certs